worker_processes  1;
error_log logs/error.log;

env IP_ADDRESS;
env HOSTNAME;

events {
    worker_connections 1024;
}

http {

    log_format logstash_json escape=json '{ "@timestamp": "$time_iso8601", '
                         '"@fields": { '
                         '"remote_addr": "$remote_addr", '
                         '"remote_user": "$remote_user", '
                         '"body_bytes_sent": "$body_bytes_sent", '
                         '"request_time": "$request_time", '
                         '"status": "$status", '
                         '"request": "$request", '
                         '"request_method": "$request_method", '
                         '"http_referrer": "$http_referer", '
                         '"http_user_agent": "$http_user_agent" } }';

    access_log /usr/local/openresty/nginx/logs/access.log logstash_json;
    # error_log /usr/local/openresty/nginx/logs/error.log logstash_json;

    server {
        listen 80;

        location / {
            default_type text/html;
            alias /www/data/;
        }

        location /recurse {
            resolver 127.0.0.11; # default docker resolver

            content_by_lua '
              -- we are using resty.http for making recursive requests
              local http = require "resty.http"
              local httpc = http.new()
              local count = tonumber(ngx.var.arg_count) or 0
              local host = ngx.var.arg_host or "127.0.0.1/recurse"

              if count <= 0 then
                ngx.status = 200
                ngx.say(string.format("%-16s %-15s Count %d", os.getenv("IP_ADDRESS"), os.getenv("HOSTNAME"), count))
                return
              end

              local res, err = httpc:request_uri("http://" .. host, {
                method = "GET",
                query = "count=" .. count - 1 .. "&host=" .. host
              })

              if not res then
                ngx.status = 500
                ngx.say("failed to request: ", err)
                return
              else
                ngx.status = res.status

                if count > 0 then
                  ngx.say(string.format("%-16s %-15s Count %d", os.getenv("IP_ADDRESS"), os.getenv("HOSTNAME"), count))
                end

                ngx.print(res.body)
              end
            ';
        }
    }
}
